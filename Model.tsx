/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: ahmagh2e (https://sketchfab.com/ahmagh2e)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/death-stranding-cargo-79db2b621cf742b38ade266815c2365b
Title: Death Stranding Cargo
*/
import { Clone, Edges, useGLTF, type EdgesRef } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useMemo, useRef } from 'react'
import type { Mesh } from 'three'
import * as THREE from 'three'

export function FadingEdges() {
  const edgesRef = useRef<EdgesRef>(null)
  const elapsedRef = useRef(0)

  useFrame((_, delta) => {
    if (!edgesRef.current) return
    elapsedRef.current += delta
    const rawOpacity = (Math.sin(elapsedRef.current * 2 * Math.PI * 0.5) + 1) / 2
    const intensity = 0.4 + 0.7 * rawOpacity

    const mat = edgesRef.current.material as unknown as THREE.LineBasicMaterial
    mat.color.setRGB(0, 0, intensity)
    mat.opacity = 1
    mat.transparent = true
    mat.needsUpdate = true
  })

  return (
    <Edges color="blue" threshold={45} ref={edgesRef} />
  )
}

export default function Model({ isSelected = false, ...props }: any) {
  const { scene } = useGLTF('/scene.gltf')
  const groupRef = useRef<THREE.Group>(null)
  const clonedScene = useMemo(() => scene.clone(true), [scene])

  return (
    <group ref={groupRef} {...props}>
      {/* If the Cargo is not selected, we display the original textures. */}
      {!isSelected && <Clone object={clonedScene} />}
      {/* If the Cargo is selected, we display the "transparent" texture and the highlight outline. */}
      {isSelected && (
        <>
          <Clone object={clonedScene} inject={(obj) => {
            if ((obj as Mesh).isMesh) {
              const mesh = obj as Mesh
              return (
                <mesh
                  geometry={mesh.geometry}
                  position={mesh.position}
                  rotation={mesh.rotation}
                  scale={mesh.scale}
                >
                  <meshStandardMaterial color="#3d4648" transparent />
                </mesh>
              )
            }
            return null
          }}
          />
          <Clone
            object={clonedScene}
            inject={<FadingEdges />}
          />
        </>
      )}
    </group>
  )
}

useGLTF.preload('/scene.gltf')
